# -*- coding: utf-8 -*-
"""GD_1DFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sMchVVSbO7T3bN4v7mJ5afe7neirQETV

#Applying LR on placement data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/placement.csv')

df.head()

df.isnull().sum()

df.shape

X=df.iloc[:,:1]
Y=df.iloc[:,1:]

X.shape

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=2,test_size=0.2)

Y_train.shape

Y_test.shape

from sklearn.linear_model import LinearRegression
lr=LinearRegression()

lr.fit(X_train,Y_train)

lr.predict(X_test)

lr.predict(X_test[:1])

from sklearn.metrics import r2_score

r2_score(Y_test,lr.predict(X_test))

mylabel=print(lr.coef_,"*X +",lr.intercept_)

sns.scatterplot(data=df,x='cgpa',y='package',color='black')
plt.plot(X_test,lr.predict(X_test),color='red',label="mylabel")
plt.legend()
plt.show()

"""# Apply GD on Placement data"""

x_train=X_train.values

x_train

x_test=X_test.values

y_train=Y_train.values
y_test=Y_test.values

class myGD:

  def __init__(self,learning_rate=0.001,no_of_epochs=50):
    self.m=0
    self.c=0
    self.lr=learning_rate
    self.epoch=no_of_epochs

  def fit(self,x_train,y_train):
     
    for i in range(self.epoch):

      y_hat=self.c+self.m*x_train
      der_c=-2*np.mean(y_train-y_hat)
      der_m=-2*np.mean( (y_train-y_hat)*x_train)
    
      self.c=self.c-(self.lr*der_c)
      self.m=self.m-(self.lr*der_m)

    print("slope is ",self.m)
    print("Intercept is ",self.c)
  
  def predict(self,x_test):
    return (self.m*x_test+self.c)

obj=myGD(0.01,7000)

obj.fit(x_train,y_train)

r2_score(y_test,obj.predict(x_test))

sns.scatterplot(data=df,x='cgpa',y='package',color='black')
plt.plot(x_test,obj.predict(x_test),color='red')
plt.show()



"""#Best Fit line by both methods"""

sns.scatterplot(data=df,x='cgpa',y='package',color='black')
plt.plot(x_test,obj.predict(x_test),color='red')
plt.plot(X_test,lr.predict(X_test),color='pink')
plt.show()

